Варианты:

- использовать стандартный "экспорт в анимированный GIF", закрепить в палитре основные цвета (+цвета из анимации прозрачности больших объектов, залитых одним цветом), и использовать "селективный" режим
  -> съест всю память

- "опубликовать" в GIF (анимированный)
  +> не требует много памяти
  +> оптимизирует GIF (создает diff-кадры: минимальная изменившаяся область-прямоугольник + прозрачность)
  -> использует "палитру по умолчанию" (нельзя задать свою палитру, и изменение "образцов цветов" никак не влияют на "палитру по умолчанию")

- экспортировать в последовательность png (24 bit)
  импортировать в GIF Movie Gear (варианты):
  - с созданием глобальной палитры цветов
    -> не все основные цвета сохранятся
  - с созданием локальной палитры цветов
    -> Movie Gear будет пытаться уменьшать количество цветов в каждой палитре
       (даже если задано использовать 256 цветов, и в исходном кадре их > 256)
    сжать в iCatalyst-2.5 (gifsicle.exe)
    -> появится шум, будет использована и глобальная и локальная палитра цветов -> файл получится большим
  - с использованием заданной глобальной палитры
    -> наилучший вариант (уже нет - Movie Gear странно назначает цвета - даже если в палитре есть точный цвет, он выбирает другой цвет - близкий [отличающийся на 1-2 деления], но все же другой - это особенно заметно для белого цвета). Палитру можно получить (варианты):
       - использовав Movie Gear создать глобальную палитру, сохранить ее, и добавить в нее основные цвета
       - из Animate/Flash при "экспорте в анимированный GIF" с закреплением основных цветов

- экспортировать в последовательность png/gif (8 bit) с заданной палитрой
  -> Второй лучший вариант (если бы так можно было сделать - задать глобальную палитру).
     При экспорте в GIF можно сразу использовать gifsicle (iCatalyst-2.5) для склейки и оптимизации GIF:
     gifsicle --delay=4 --loop --no-comments --no-extensions --no-names --optimize=3 --background "#FFFFFF" --use-colormap 1.gif --no-conserve-memory *.gif --output anim-g.gif


NOTE: в Movie Gear png загружать по очереди, не более 1920 оригинальных (24bit) файлов за раз - иначе кончится память (Movie Gear - 32bit приложение)
NOTE: в Movie Gear при использовании "Map all to fixed palette" и добавлении одновременно всех кадров (файлов) - первый кадр загружается корректно, а остальные - пустые (залиты одним цветом). Решение: вначале добавить первый кадр, а затем - все остальные.
NOTE: настроить частоту кадров для GIF (в Animate/Flash было 24fps)
NOTE: при создании палитры цветов учитывать, что в большинстве кадров основным "цветом" будет прозрачность;
в GIF для задания прозрачности используется один из цветов в палитре -> выбрать в качестве прозрачности
малоиспользуемый (либо неиспользуемый) / редкоперемещаемый (при анимации движения) цвет {возможно я буду использовать зеленый цвет "V"};
разместить "прозрачный цвет" в начале палитры (под индексом 0)
NOTE: gifsicle автоматически перестроит палитру в процессе оптимизации (и он не будет использовать зеленый цвет "V")
NOTE: при создании глобальной палитры цветов нужно пропускать кадры из конца "#2" (там, где появляется зеленая V {Ok} или красный X {Error}) - для них я буду использовать локальную палитру цветов (для нулевой итерации глобальную палитру нужно строить на основе 1-990, 1023-... кадров)
NOTE: кадры с локальной палитрой (V {Ok} и X {Error}) экспортировать с запасом в 1 пре-кадр и 1 пост-кадр (для нулевой итерации: 990-1023), чтобы после оптимизации в gifsicle, пре-кадр можно было стереть, оставив только diff-кадры (кадры с прозрачностью), а пост-кадром заменить "большой" diff-кадр (из кадров с глобальной палитрой)
NOTE: при "экспорте в последовательность png" Animate/Flash добавляет в конце лишние кадры/файлы (он экспортирует все монтажные области, лишние кадры из монтажной области "test", "...palette") - их нужно стереть, либо перед экспортом временно удалить лишние монтажные области

NOTE: оптимальный (количество сохраненных оригинальных цветов / размер файла) вариант генерации глобальной палитры:
- сгенерировать все diff-кадры (убрать повторяющиеся кадры + наименьшая прямоугольная область кадра + прозрачность) на основе PNG24
- сгенерировать глобальную палитру на основе полученных diff-кадров
- используя полученную палитру преобразовать PNG24 -> PNG8 (или в GIF8)
- перегенерировать diff-кадры, т.к. количество цветов уменьшилось (2 близких цвета могут стать одним цветом) -> маска прозрачности может измениться (эти 2 цвета располагались в одном и том же пикселе [координаты пикселя совпадают] на двух рядом стоящих кадрах -> цвет пикселя не изменился во времени -> прозрачных пикселей может стать больше)


в глобальной палитре доступно 70 оттенков синего для замены (на зеленый или красный)
Как получено число 70? (ручной способ):
- открыть палитру в экспортере Adobe* (сохранить для Web)
- отсортировать ее по тону
- найти первый цвет с преобладающей синей компонентой (т.е. RGB: R<B && G<B), и проверить, что в конце палитры синий все еще преобладает.

Дополнительная проверка.
Проверить, что все малонасыщенные оттенки синего (серые, светлые, темные) имеют низкую частоту использования:
- создать отсортированную по тону палитру:
  - загрузить в экспортер палитру "palette.global.edit.act"
  - отсортировать ее по тону
  - сохранить в "palette.global.edit.sort_by_tone.act"
- применить созданную палитру к "palette.global.edit.png", экспортировав его в "palette.global.edit.sort_by_tone.png"
- проверка оттенков
  - открыть "palette.global.edit.sort_by_tone.png" в Movie Gear
  - открыть редактор "глобальной палитры"
  - щелкать на цвет в палитре, и смотреть на его местоположение на изображении (на изображении цвета отсортированы по частоте использования)


Замена 70 оттенков синего (объединение палитр "palette.global.edit.act"+"palette.local.green.act"->"palette.local.green.edit.act"):
- удалить оттенки синего из палитры (и, если есть, один зеленый цвет, вставленный "для прозрачности")
  - открыть "palette.global.edit.sort_by_tone.act" в экспортере
  - удалить 70 цветов
  - сохранить палитру в "palette.global.edit.sort_by_tone.cut.act"
- извлечь из "palette.local.green.act" оттенки зеленого:
  - открыть его в экспортере
  - отсортировать цвета по тону
  - удалить из палитры все "не оттенки зеленого" (RGB: !(R<=G && B<G))
  - сохранить палитру в "palette.local.green.edit.act"
- вставить в палитру оттенки зеленого
  - открыть "palette.global.edit.sort_by_tone.cut.act" в HEX редакторе
  - вставить оттенки зеленого в "пустые слоты"
  - подправить количество цветов (offset: 0x300; 2 byte)
  - сохранить изменения в файл "palette.local.green.edit.act"


В итоге:
- экспорт в последовательность png (24 bit)
NOTE: Animate/Flash экспортирует в один поток (CPU)? Animate/Flash не дает запустить вторую свою копию (для параллельного экспорта нескольких проектов-итераций)? Не хочется создавать нового пользователя на PC (чтобы запустить еще одну копию Animate/Flash под другим пользователем)? Не хочешь использовать песочницу?
      Хочешь жить проще? Хак (лучше предварительно сделать бекап проектов):
      - перезапустить Animate/Flash
      - в Process Explorer открыть нижнюю панель (Handles; Ctrl+H) для процесса Animate/Flash
      - найти хендел
        - Type: Section
        - Name: "\Sessions\*\BaseNamedObjects\adobe.flash-*"
      - закрыть хендел (контекстное меню)
      - запустить новый Animate/Flash
      - привязать каждый Animate/Flash к своему ядру CPU ("Set Affinity" в Process Explorer)
      - ... (экспортировать, и ничего больше не делать! Не сохранять никаких изменений!)
      - закрывать Animate/Flash начиная с первого открытого, либо (надежнее) закрыть все открытые проекты во всех Animate/Flash, затем "убить" все Animate/Flash через Process Explorer
- преобразовать в индексированные цвета:
  - сгенерировать палитру в Animate/Flash (это потребует 26.4 GiB памяти - нужно увеличить размер файла подкачки), отсортировать цвета по "частоте использования"
  - закрыть Animate/Flash
  - отредактировать палитру (либо в Photoshop{окно "сохранить для Web"}, либо в Animate/Flash при экспорте одного кадра, либо в HEX редакторе - формат ".act" файла простой: "<RGB:3byte><RGB:3byte><RGB:3byte>...<size:2byte>FFFF"; записал в файл "Colors for palette.md") - см. NOTE + разместить все основные цвета (посмотреть в Corel + уточнить цвет в Animate/Flash) в начале палитры
  - (это тревожит/ужасно, лучше добавить в gifsicle возможность чтения PNG24 и перевод 24bit->8bit с предварительно заданной палитрой "--use-colormap", либо написать отдельную tool)
    - в Photoshop создать сценарий экспорта, использующий созданную палитру
    - в Photoshop создать дроплет (Файл - Автоматизация - Создать дроплет...)
    - использовать дроплет:
      - [для ускорения] настроить Photoshop на открытие документов во вкладках
      - [для ускорения] уменьшить размер окна до минимально возможного
      - воспользоваться дроплетом (перетащить папку)
      - [для ускорения] свернуть окно Photoshop (можно не пытаться минимизировать через GUI окна - он будет занят; использовать: Win+стрелка вниз)
NOTE: при работе с локальной палитрой (кадры с V {Ok} и X {Error}) можно экспортировать в анимированный GIF8 прямо из Animate/Flash (там кадров немного, памяти хватит)
- объединить "глобальные" кадры либо в Movie Gear, либо в gifsicle (лучше в нем)
  при объединении в gifsicle, на предыдущем шаге нужно экспортировать в ".gif"
  при объединении в Movie Gear нужно:
   - предварительно загрузить нужную палитру (Edit - Preferences... - [Palettes] - "Map all to fixed palette" - Load - и выбрать файл с первым кадром), иначе при добавлении всех кадров "скопом" - он сам создаст глобальную палитру (этого не произойдет, если вначале добавить первый кадр, а затем - остальные)
   - задать глобальный цвет фона (белый)
   - задать глобальный цвет прозрачности (зеленый), иначе он при оптимизации будет использовать последний цвет в палитре (если оптимизировать в gifsicle, то лучше это не делать)
- "локальные" кадры:
  - оптимизировать и стереть "пре-кадр":
    gifsicle --no-comments --no-extensions --no-names --optimize=3 ok.gif | gifsicle --delete "#0" --output anim-ok.gif
     или (создание из последовательности файлов-кадров)
    gifsicle --delay=4 --loop --no-comments --no-extensions --no-names --optimize=3 --background "#FFFFFF" *.gif | gifsicle --delete "#0" --output anim-ok.gif
  - сейчас "локальные" кадры используют свою глобальную палитру (если прямо сейчас влить anim-ok.gif в anim.gif, то глобальная палитра anim.gif изменится)
    нужно переместить глобальную палитру в локальную для каждого кадра, а затем заменить глобальную палитру на глобальную палитру используемую в anim.gif :
    - открыть "palette.global.edit.png" в Movie Gear  [фиксируем глобальную палитру]
    - настроить создание локальных палитр (Edit - Preferences... - [Palettes] - "Use local palette for every new frame")
    - вставить "anim-ok.gif"
    - оптимизировать (Optimize Animation) с параметрами:
      - Palettes:
        - [v] Shrink palettes (global and local)
        - [v] Remove local palettes
           -  Only remove if clean merge with global palette
      - Frame reduction (отключить)
      NOTE: иногда gifsicle при оптимизации выбирает в качестве прозрачного цвета - цвет, отсутствующий в палитре "palette.global.edit.act". Это мешает Movie Gear оптимизировать кадр (заменить локальную палитру на глобальную). Придется вручную менять цвет прозрачности на один из цветов из глобальной палитры (важно, чтобы он не использовался в текущем кадре), например на синий (66 133 244). Так произошло с последними кадрами X {Error} (+ в конце красной линии заменил цвет светлого красного пикселя на желтый; можно было заменить на красный, который попал в глобальную палитру, но в ней только 1 вакантное место для зеленого или красного цвета)
    - удалить первый кадр ("palette.global.edit.png")
    - сохранить анимацию в "anim-ok.gif"
- объединение "anim.gif" и "anim-ok.gif" (+ настройка цвета фона):
  - открыть "anim.gif" и найти (при помощи проигрывателя/воспроизведения) место разрыва анимации, и посмотреть номер первого кадра после разрыва (=="пост-кадр" в "anim-ok.gif") (для нулевой итерации: кадр #809)
  - слияние / замена "толстого кадра":
    gifsicle --no-comments --no-extensions --no-names --no-conserve-memory --background "#FFFFFF" anim-g.gif --replace "#808" anim-ok.gif --output merged.gif
NOTE: в Movie Gear кадры нумеруются с 1, а в gifsicle - с 0, следовательно #809 -> #808

NOTE: если прямо сейчас оптимизировать (gifsicle --optimize=3) "merged.gif", то размер файла уменьшится на 1078 byte, но (минусы):
- глобальная палитра изменится (это может помешать при будущем слиянии с GIF остальных итераций)
- появится множество локальных палитр, разбросанных по всему файлу

NOTE: лучше вначале объединить все "anim-g.gif" (со всех итераций) с включенной оптимизацией (gifsicle --optimize=3), а затем влить все кадры с V {Ok} и X {Error} (без оптимизации)
      gifsicle --no-comments --no-extensions --no-names --optimize=3 --no-conserve-memory "(start)\anim-g.gif" 0\anim-g.gif 1\anim-g.gif 2\anim-g.gif 3\anim-g.gif "3...9\anim-g.gif" 9\anim-g.gif "9...131\anim-g.gif" 131\anim-g.gif --output merged-g.gif
NOTE: для своего "merged-g.gif" я получил следующее распределение кадров (<итерация>: <количество кадров> <диапазон кадров для Movie Gear> <диапазон кадров для gifsicle>):
     -1:   37     1.....37     0.....36
      0: 1969    38...2006    37...2005
      1: 1963  2007...3969  2006...3968
      2: 1966  3970...5935  3969...5934
      3: 1970  5936...7905  5935...7904
  3...9:   38  7906...7943  7905...7942
      9:  764  7944...8707  7943...8706
9...131:   38  8708...8745  8707...8744
    131: 1948  8746..10693  8745..10692
NOTE: Movie Gear для каждого кадра создает по одному GDI handle, и из-за лимита в 10000 GDI handles на процесс - он зависнет при открытии "merged-g.gif" придется временно увеличить лимит:
      https://msdn.microsoft.com/en-us/library/windows/desktop/ms724291.aspx
      https://blogs.technet.microsoft.com/markrussinovich/2010/03/31/pushing-the-limits-of-windows-user-and-gdi-objects-part-2/
      https://weblogs.asp.net/mikedopp/increasing-user-handle-and-gdi-handle-limits
NOTE: в оптимизированном (gifsicle --optimize=3) "merged-g.gif" первый кадр очередной итерации (т.е. место склейки "anim-g.gif" файлов) содержит мусор (небольшое отличие в пикселях). Эти кадры можно безопасно (добавив длительность [время] удаляемого кадра к предыдущему кадру) удалить, сэкономив при этом 11934 byte (после последующей оптимизации в gifsicle)
NOTE: если хотите удалять "мусорные кадры", то создавать "merged-g.gif" можно без оптимизации (gifsicle --optimize=3) - на итоговый размер файла это не скажется, т.к. после удаления "мусорных кадров" все равно нужно провести оптимизацию (gifsicle --optimize=3)
NOTE: после удаления "мусорных кадров", кадры для слияния "merged-g.gif" с "anim-ok.gif" и "anim-error.gif" будут следующими:
      0:   38+807-1 = 844
      1: 2006+802-1 = 2807
      2: 3968+798-1 = 4765
      3: 5933+811-1 = 6743
      9: 7939+755-1 = 8693
    131: 8739+800-1 = 9538
слияние,
! не делать так (не использовать множественную замену):
gifsicle --no-comments --no-extensions --no-names --no-conserve-memory --background "#FFFFFF" merged-g.gif ^
--replace "#844"  0\anim-ok.gif    ^
--replace "#2807" 1\anim-ok.gif    ^
--replace "#4765" 2\anim-ok.gif    ^
--replace "#6743" 3\anim-ok.gif    ^
--replace "#8693" 9\anim-error.gif ^
--replace "#9538" 131\anim-ok.gif  ^
--output merged.gif
bug: первая замена проходит нормально, но все последующие замены начинают использовать только локальную палитру (см. последние вставленные кадры "anim-ok.gif" и "anim-error.gif": #858, #2835, #4807, #6799, #8780, #9644) и выводить сообщения "frame '#2807' out of range, image has 15 frames"...
Это тоже не поможет (только сообщения "out of range" исчезнут):
gifsicle --no-comments --no-extensions --no-names --no-conserve-memory --background "#FFFFFF" ^
merged-g.gif "#0-843"     0\anim-ok.gif ^
merged-g.gif "#845-2806"  1\anim-ok.gif ^
merged-g.gif "#2808-4764" 2\anim-ok.gif ^
merged-g.gif "#4766-6742" 3\anim-ok.gif ^
merged-g.gif "#6744-8692" 9\anim-error.gif ^
merged-g.gif "#8694-9537" 131\anim-ok.gif ^
merged-g.gif "#9539-" ^
--output merged2.gif
Придется сделать так:
gifsicle --no-comments --no-extensions --no-names --no-conserve-memory --background "#FFFFFF" merged-g.gif --replace "#9538" 131\anim-ok.gif  | ^
gifsicle --no-comments --no-extensions --no-names --no-conserve-memory --background "#FFFFFF" --replace "#8693" 9\anim-error.gif | ^
gifsicle --no-comments --no-extensions --no-names --no-conserve-memory --background "#FFFFFF" --replace "#6743" 3\anim-ok.gif    | ^
gifsicle --no-comments --no-extensions --no-names --no-conserve-memory --background "#FFFFFF" --replace "#4765" 2\anim-ok.gif    | ^
gifsicle --no-comments --no-extensions --no-names --no-conserve-memory --background "#FFFFFF" --replace "#2807" 1\anim-ok.gif    | ^
gifsicle --no-comments --no-extensions --no-names --no-conserve-memory --background "#FFFFFF" --replace "#844"  0\anim-ok.gif --output merged3.gif
Но здесь наоборот - первая (последняя: --replace "#844" 0\anim-ok.gif) замена начала использовать локальную палитру...
Похоже, я понял :) Делаем так:
gifsicle --no-comments --no-extensions --no-names --no-conserve-memory --background "#FFFFFF" merged-g.gif ^
--replace "#844"  0\anim-ok.gif    ^
--replace "#2807" 1\anim-ok.gif    ^
--replace "#4765" 2\anim-ok.gif    ^
--replace "#6743" 3\anim-ok.gif    ^
--replace "#8693" 9\anim-error.gif ^
--replace "#9538" 131\anim-ok.gif  | ^
gifsicle --no-conserve-memory --background "#FFFFFF" --output merged.final.gif
NOTE: помнить, что надо добавить "нулевой кадр" (th.gif) для предпросмотра
Последовательность слияния важна (влияет на размер файла):
gifsicle --no-conserve-memory th.gif merged.final.gif --output final.d.gif
gifsicle --no-conserve-memory merged.final.gif th.gif --output final.r.gif
размеры файлов:
 - исходные файлы:
   - merged.final.gif: 6 543 103 byte
   - th.gif:              44 420 byte
 - final.d.gif:        6 665 218 byte
 - final.r.gif:        6 586 694 byte
Это тоже не сработает:
gifsicle --no-conserve-memory merged.final.gif --insert-before "#0" th.gif --output final.i.gif
Размер final.i.gif:    6 665 218 byte
Придется сделать это при помощи Movie Gear.
NOTE: если сразу скормить "merged.final.gif" в Movie Gear, вставить "th.gif", и сохранить анимацию в файл "final.mg.gif", то он окажется битым!
      если этот файл скормить в gifsicle:
      gifsicle --no-conserve-memory final.mg.gif --output final.mg.o.gif
      то он выдаст номера испорченных кадров:
      gifsicle:final.mg.gif:#8759: read error: image corrupted, code out of range (2 times)
      gifsicle:final.mg.gif:#8759: read error: missing 17339 pixels of image data
      gifsicle:final.mg.gif:#8761: read error: image corrupted, code out of range (2 times)
      ...
      gifsicle: (plus more errors; is this GIF corrupt?)
      если открыть "final.mg.gif" или "final.mg.o.gif" в Movie Gear, и найти эти кадры то можно будет увидеть эти повреждения.
      Решение: сделать "merged.final.gif" более безопасным (использовать опцию  --careful):
      gifsicle --careful --no-conserve-memory merged.final.gif --output final.cfl.gif
- открыть "final.cfl.gif" в Movie Gear
- переключить на режим "Map new to current global palette" (Edit - Preferences... - [Palettes])
- уменьшить масштаб превьюшек (Zoom Out)
- перетащить "th.gif" на превью первого кадра (при этом он разместится перед ним)
- сохранить анимацию в "final.cfl.mg.gif"
- пропустить "final.cfl.mg.gif" через gifsicle (для уменьшения размера):
  gifsicle --no-conserve-memory final.cfl.mg.gif --output final.mg.o.gif
Результат: размер final.mg.o.gif: 6 586 694 byte (совпадает с размером "final.r.gif", и даже их глобальные палитры цветов совпадают; так почему же сам gifsicle сразу не смог это сделать...; на самом деле я пробовал еще несколько способов, чтобы обойтись только gifsicle, например, предварительно привести "th.gif" к глобальной цветовой палитре "merged.final.gif" - по аналогии с Movie Gear, но и это не помогло)
NOTE: попались :) На самом деле этого можно добиться в gifsicle (просто перенесем добавленный кадр с конца на начало):
gifsicle --no-conserve-memory final.r.gif "#-1" "#0--2" --output final.r.r.gif
 либо (без создания промежуточного файла)
gifsicle --no-conserve-memory merged.final.gif th.gif | gifsicle --no-conserve-memory "#-1" "#0--2" --output final.r.r.gif
NOTE: если собрались в конце оптимизировать (gifsicle --optimize=3), то вышеописанное можно не делать - оно ничего не даст: размер "final.d.gif", после оптимизации, сравняется с размером оптимизированных "final.mg.o.gif" и "final.r.r.gif", а оптимизированный "final.r.gif" будет немного меньше (из-за того, что кадр находится в конце, и он станет diff-кадром)

Осталось уменьшить длительность нулевого кадра (кадр из th.gif) до нуля.
NOTE: gifsicle не любит нулевую длительность кадра.
      Если кадр уже имел длительность 0 (например, установили это значение для кадра в Movie Gear), то после gifsicle его длительность будет равна 4 (использует длительность из глобальных параметров анимации?)
      Если в gifsicle принудительно установить для кадра 0:
      gifsicle --no-conserve-memory final.r.r.gif --delay 0 "#0" --same-delay "#1-" --output final.r.dl0.gif
      , то все равно будет 4
      можно поставить 1:
      gifsicle --no-conserve-memory final.r.r.gif --delay 1 "#0" --same-delay "#1-" --output final.r.dl1.gif
      , и это сработает
      можно поставить 2:
      gifsicle --no-conserve-memory final.r.r.gif --delay 2 "#0" --same-delay "#1-" --output final.r.dl2.gif
      , и это тоже сработает
      а теперь открываем HEX редактор, находим отличия между "final.r.dl1.gif" и "final.r.dl2.gif", и ставим там 0. PROFIT! :))
NOTE: опять попались :) gifsicle специально не дает использовать нулевую задержку:
      - https://www.imagemagick.org/discourse-server/viewtopic.php?t=22855#p95627
      - https://bugzilla.mozilla.org/show_bug.cgi?id=890743#c42
      - https://superuser.com/questions/569924/why-is-the-gif-i-created-so-slow
      - http://nullsleep.tumblr.com/post/16524517190/animated-gif-minimum-frame-delay-browser
      "--delay 2" подойдет:
      gifsicle --no-conserve-memory final.r.r.gif --delay 2 "#0" --same-delay "#1-" --output final.r.dl2.gif

Еще можно окончательно подчистить и установить белый цвет фона (он постоянно сбрасывается; хотя он и не нужен для данной анимации):
gifsicle --no-comments --no-extensions --no-names --background "#FFFFFF" --no-conserve-memory final.r.dl2.gif --output binarization.gif
